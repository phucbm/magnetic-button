{"version":3,"sources":["../src/umd.ts","../node_modules/.pnpm/@phucbm+lerp@1.0.0/node_modules/@phucbm/lerp/src/index.ts","../src/index.ts"],"sourcesContent":["/**\n * UMD entry point with auto-initialization and global API\n * This file creates the browser-friendly version that auto-initializes on load\n */\n\nimport {MagneticButton as MagneticButtonClass, type MagneticButtonOptions} from './index'\n\n// Auto-initialize all magnetic buttons when script loads\nnew MagneticButtonClass()\n\n// Create global API with MagneticButton as constructor\nconst MagneticButtonAPI = MagneticButtonClass as any\n\n// Add init method for convenience\nMagneticButtonAPI.init = (target?: HTMLElement | null, options?: MagneticButtonOptions) => {\n    return new MagneticButtonClass(target, options)\n}\n\n// Export as default for IIFE global\nexport default MagneticButtonAPI\n\n// Also attach to window for direct access\nif (typeof window !== 'undefined') {\n    ;(window as any).MagneticButton = MagneticButtonAPI\n}","/**\n * Linear interpolation function for smooth animation\n * @param start - Starting value\n * @param end - Target value\n * @param fraction - Interpolation factor (0 = no change, 1 = instant change), default: 0.1\n * @returns Interpolated value between start and end\n */\nexport function lerp(start: number, end: number, fraction: number = 0.1): number {\n    return start * (1 - fraction) + end * fraction;\n}\n\n// Default export for convenience\nexport default lerp;\n","/**\n * Magnetic Button Effect\n * A lightweight TypeScript library that creates magnetic attraction effects for HTML elements\n * @version 1.0.0\n * @author Original by phucbm\n */\n\nimport lerp from \"@phucbm/lerp\";\n\n/**\n * Configuration options for the magnetic button effect\n */\nexport interface MagneticButtonOptions {\n    /** CSS class added when the magnetic effect is active */\n    activeClass?: string;\n    /** Controls the strength of the magnetic pull (0 = strong, 1 = weak) */\n    attraction?: number;\n    /** Defines the range within which the magnetic effect is active (in pixels) */\n    distance?: number;\n    /** Controls the speed of the magnetic movement (0 = instant, 1 = slow) */\n    fraction?: number;\n    /** Callback fired when mouse enters the magnetic area */\n    onEnter?: (data: MagneticData) => void;\n    /** Callback fired when mouse exits the magnetic area */\n    onExit?: (data: MagneticData) => void;\n    /** Callback fired continuously while mouse is in the magnetic area */\n    onUpdate?: (data: MagneticData) => void;\n}\n\n/**\n * Data object containing magnetic effect calculations\n */\nexport interface MagneticData {\n    /** Horizontal offset from element center */\n    deltaX: number;\n    /** Vertical offset from element center */\n    deltaY: number;\n    /** Distance between mouse and element center */\n    distance: number;\n}\n\n/**\n * Position coordinates for interpolation\n */\ninterface LerpPosition {\n    x: number;\n    y: number;\n}\n\n/**\n * MagneticButton class creates magnetic attraction effects for HTML elements\n *\n * Usage:\n * ```html\n * <button data-magnetic data-distance=\"150\" data-attraction=\"0.3\" data-fraction=\"0.2\">\n *   Hover me!\n * </button>\n * ```\n *\n * ```typescript\n * import { MagneticButton } from 'magnetic-button';\n *\n * // Auto-initialize all elements with data-magnetic attribute\n * new MagneticButton();\n *\n * // Or target specific element\n * const button = document.querySelector('.my-button');\n * new MagneticButton(button, { distance: 200, attraction: 0.5 });\n * ```\n */\nexport class MagneticButton {\n    private readonly settings: Required<MagneticButtonOptions> = {\n        activeClass: 'magnetizing',\n        attraction: 0.3,\n        distance: 200,\n        fraction: 0.1,\n        onEnter: () => {\n        },\n        onExit: () => {\n        },\n        onUpdate: () => {\n        },\n    };\n    private isEnter: boolean = false;\n    private lerpPos: LerpPosition = {x: 0, y: 0};\n\n    // Track initialized elements to avoid duplicates\n    private static initializedElements = new WeakSet<HTMLElement>();\n\n    /**\n     * Creates a new MagneticButton instance\n     * @param target - The HTML element to apply magnetic effect to. If null, auto-initializes all elements with data-magnetic attribute\n     * @param options - Configuration options for the magnetic effect\n     */\n    constructor(target?: HTMLElement | null, options: MagneticButtonOptions = {}) {\n        // If no target is provided, select all elements with data-magnetic attribute\n        if (!target) {\n            document.querySelectorAll<HTMLElement>('[data-magnetic]').forEach(element => {\n                // Skip if already initialized\n                if (!MagneticButton.initializedElements.has(element)) {\n                    new MagneticButton(element, options);\n                }\n            });\n            return; // Exit constructor if initializing multiple instances\n        }\n\n        // Skip if this element is already initialized\n        if (MagneticButton.initializedElements.has(target)) {\n            return;\n        }\n\n        // Mark as initialized\n        MagneticButton.initializedElements.add(target);\n\n        // Extract and validate data attributes\n        const dataDistance = parseFloat(target.getAttribute('data-distance') || '');\n        const dataAttraction = parseFloat(target.getAttribute('data-attraction') || '');\n        const dataFraction = parseFloat(target.getAttribute('data-fraction') || '');\n\n        // Merge default settings with options and data attributes\n        this.settings = {\n            ...this.settings,\n            attraction: !isNaN(dataAttraction) ? dataAttraction : options.attraction ?? this.settings.attraction,\n            distance: !isNaN(dataDistance) ? dataDistance : options.distance ?? this.settings.distance,\n            fraction: !isNaN(dataFraction) ? dataFraction : options.fraction ?? this.settings.fraction,\n            ...options,\n        };\n\n        // Watch for mouse move events\n        window.addEventListener('mousemove', (e: MouseEvent) => this.magnetize(target, e));\n\n        // Add identification class\n        target.classList.add('is-magnetized');\n    }\n\n    /**\n     * Main magnetization logic - processes mouse movement and applies magnetic effect\n     * @param target - The target element\n     * @param e - Mouse event\n     */\n    private magnetize(target: HTMLElement, e: MouseEvent): void {\n        const data = this.calculateCoordinates(target, e.clientX, e.clientY);\n\n        if (data.distance < this.settings.distance) {\n            // Mouse is inside magnetized area\n            this.animateButton(target, data.deltaX, data.deltaY);\n\n            if (!this.isEnter) {\n                this.isEnter = true;\n                target.classList.add(this.settings.activeClass);\n                this.settings.onEnter(data);\n            }\n\n            this.settings.onUpdate(data);\n        } else {\n            // Mouse is outside - return to origin\n            this.animateButton(target, 0, 0);\n\n            if (this.isEnter) {\n                this.isEnter = false;\n                target.classList.remove(this.settings.activeClass);\n                this.settings.onExit(data);\n            }\n        }\n    }\n\n\n    /**\n     * Applies smooth animation to the button using transform\n     * @param target - The target element\n     * @param endX - Target X position\n     * @param endY - Target Y position\n     */\n    private animateButton(target: HTMLElement, endX: number, endY: number): void {\n        // Get interpolated position values\n        this.lerpPos.x = lerp(this.lerpPos.x, endX, this.settings.fraction);\n        this.lerpPos.y = lerp(this.lerpPos.y, endY, this.settings.fraction);\n\n        // Apply transform\n        target.style.transform = `translate(${this.lerpPos.x}px, ${this.lerpPos.y}px)`;\n    }\n\n    /**\n     * Calculates distances and coordinates between mouse and element center\n     * @param target - The target element\n     * @param mouseX - Mouse X coordinate\n     * @param mouseY - Mouse Y coordinate\n     * @returns Object containing delta values and distance\n     */\n    private calculateCoordinates(target: HTMLElement, mouseX: number, mouseY: number): MagneticData {\n        const viewportOffset = target.getBoundingClientRect();\n\n        // Center point of target relative to viewport\n        const centerX = viewportOffset.left + target.offsetWidth / 2;\n        const centerY = viewportOffset.top + target.offsetHeight / 2;\n\n        // Calculate delta with attraction factor\n        const deltaX = (mouseX - centerX) * this.settings.attraction;\n        const deltaY = (mouseY - centerY) * this.settings.attraction;\n\n        // Calculate distance between mouse and target center\n        const distance = Math.sqrt(Math.pow(mouseX - centerX, 2) + Math.pow(mouseY - centerY, 2));\n\n        return {deltaX, deltaY, distance};\n    }\n}\n\n/**\n * Auto-initialize magnetic buttons when DOM is ready (only in browser environment)\n */\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => new MagneticButton());\n    } else {\n        new MagneticButton();\n    }\n}\n\nexport default MagneticButton;"],"mappings":"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","names":[]}